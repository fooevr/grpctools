using System;
using System.ComponentModel;
using System.Collections.ObjectModel;
using com.variflight.dataservice.client;
using com.variflight.dataservice;
using Google.Protobuf.WellKnownTypes;
using Google.Protobuf;

/*
{% for comm in data.Comment %}
 *{{comm }}
{% endfor %}
 */
namespace {{data.CsNamespace}}{% if data.Suffix != "" %}.{{data.Suffix}}
{%endif%}
{
    {% for cls in data.Messages %}
    ///<summary>
    {% for comm in cls.Comment%}
    ///{{comm}}
    {% endfor %}
    ///</summary>
    public class {{cls.Name}} : IDAO
    {
        #region 消息字段
        {% for field in cls.Fields%}
        ///<summary>
        {% for comm in field.Comment%}
        ///{{comm}}
        {% endfor %}
        ///</summary>

        {% if field.FieldType == 0%}
        private {{field.CsType}} _{{field.Name}};
        public {{field.CsType}} {{field.Name}} { get { return _{{field.Name}}; } set { _{{field.Name}} = value; invokePropertyChanged("{{field.Name}}"); }}
        {% elif field.FieldType == 1 %}
        private {{field.CsType}}{% if field.Nullable && field.CsType != "string" %}?{%endif%} _{{field.Name}};
        public {{field.CsType}}{% if field.Nullable && field.CsType != "string" %}?{%endif%} {{field.Name}} { get { return _{{field.Name}}; } set { _{{field.Name}} = value; invokePropertyChanged("{{field.Name}}"); }}
        {% elif field.FieldType == 2 %}
        private MapCollection<{{field.CsKeyType}}, {{field.CsType}}{% if field.Nullable && field.CsType != "string" %}?{%endif%}, {{field.CsMessageType}}> _{{field.Name}} = new MapCollection<{{field.CsKeyType}}, {{field.CsType}}{% if field.Nullable && field.CsType != "string" %}?{%endif%}, {{field.CsMessageType}}>();
        public MapCollection<{{field.CsKeyType}}, {{field.CsType}}{% if field.Nullable && field.CsType != "string" %}?{%endif%}, {{field.CsMessageType}}> {{field.Name}} { get { return _{{field.Name}}; } set { _{{field.Name}} = value; invokePropertyChanged("{{field.Name}}"); }}
        {% elif field.FieldType == 3 %}
        private ListCollection<{{field.CsType}}{% if field.Nullable && field.CsType != "string" %}?{%endif%}, {{field.CsMessageType}}> _{{field.Name}} = new ListCollection<{{field.CsType}}{% if field.Nullable && field.CsType != "string" %}?{%endif%}, {{field.CsMessageType}}>();
        public ListCollection<{{field.CsType}}{% if field.Nullable && field.CsType != "string" %}?{%endif%}, {{field.CsMessageType}}> {{field.Name}} { get { return _{{field.Name}}; } set { _{{field.Name}} = value; invokePropertyChanged("{{field.Name}}"); }}
        {%endif%}
        {% endfor %}
        #endregion

        #region INotifyPropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;
        private void invokePropertyChanged(String proName)
        {
            this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(proName));
        }
        #endregion

        #region Proto Parse
        public void MergeFromMessage(IMessage message, bool full, ChangeDesc cm)
        {
            for (var idx = 0; idx < {{data.CsNamespace}}.{{cls.Name}}.Descriptor.Fields.InFieldNumberOrder().Count; idx++)
            {
                var field = {{data.CsNamespace}}.{{cls.Name}}.Descriptor.Fields.InFieldNumberOrder()[idx];

                var isCreate = cm != null && (cm.FieldTags.ToByteArray()[(int)Math.Floor(idx / 4.0)] << ((idx % 4) * 2) & 0b11000000) == (int)ChangeType.Created;
                var isDelete = cm != null && (cm.FieldTags.ToByteArray()[(int)Math.Floor(idx / 4.0)] << ((idx % 4) * 2) & 0b11000000) == (int)ChangeType.Deleted;
                var isUpdate = cm != null && (cm.FieldTags.ToByteArray()[(int)Math.Floor(idx / 4.0)] << ((idx % 4) * 2) & 0b11000000) == (int)ChangeType.Updated;

                if (full)
                {
                    isCreate = true;
                    isDelete = false;
                    isUpdate = false;
                }
                var isUnchanged = !isCreate && !isDelete && !isUpdate;
                if (isUnchanged)
                {
                    continue;
                }
                if (isDelete)
                {
                    {%for field in cls.Fields%}
                    if (field.FieldNumber == {{field.Number}})
                    {
                        {% if field.FieldType == 0 %}
                        this.{{field.Name}} = null;
                        {% elif field.FieldType == 1 %}
                        this.{{field.Name}} = default({{field.CsMessageType}}{% if field.Nullable && field.CsType != "string" %}?{%endif%});
                        {% elif field.FieldType == 2 || field.FieldType == 3%}
                        this.{{field.Name}}.Clear();
                        {%endif%}
                    }
                    {%endfor%}
                    continue;
                }
                if (isCreate)
                {
                    if (field.Accessor.GetValue(message) == null)
                    {
                        continue;
                    }
                    {%for field in cls.Fields%}
                    if (field.FieldNumber == {{field.Number}})
                    {
                        {% if field.FieldType == 0 %}
                        var temp = new {{field.CsType}}();
                        temp.MergeFromMessage(field.Accessor.GetValue(message) as {{field.CsMessageType}}, true, null);
                        this.{{field.Name}} = temp;
                        {% elif field.FieldType == 1 %}
                        this.{{field.Name}} = ({{field.CsType}}{% if field.Nullable && field.CsType != "string" %}?{%endif%})field.Accessor.GetValue(message);
                        {% elif field.FieldType == 2 || field.FieldType == 3%}
                        this.{{field.Name}}.Clear();
                        this.{{field.Name}}.MergeFromMessage(message, field, true, null);
                        {%endif%}
                    }
                    {%endfor%}
                    continue;
                }
                if (isUpdate)
                {
                    ChangeDesc change = null;
                    if (cm != null && cm.ChangeTags != null)
                    {
                        if ((cm.ChangeTags.ToByteArray()[(int)Math.Floor(idx/8.0)] >> (7 - (idx % 8)) & 0b00000001) == 0b1)
                        {
                            var fieldIndex = 0;
                            for (var i = 0; i < idx; i++)
                            {
                                if ((cm.ChangeTags.ToByteArray()[(int)Math.Floor(i / 8.0)] >> (7 - (i % 8)) & 0b00000001) == 0b1)
                                {
                                    fieldIndex++;
                                }
                            }
                            change = cm.FieldsChangeDescs[fieldIndex];
                        }
                    }
                    {%for field in cls.Fields%}
                    if (field.FieldNumber == {{field.Number}})
                    {
                        {% if field.FieldType == 0 %}
                        var temp = this.{{field.Name}};
                        if (temp == null)
                        {
                            temp = new {{field.CsType}}();
                        }
                        if (message == null || (field.Accessor.GetValue(message) != null && !(field.Accessor.GetValue(message) is {{field.CsMessageType}})))
                        {
                            temp.MergeFromMessage(null, full, change);
                        }
                        else
                        {
                            temp.MergeFromMessage(field.Accessor.GetValue(message) as {{field.CsMessageType}}, full, change);
                        }
                        if (this.{{field.Name}} != temp)
                        {
                            this.{{field.Name}} = temp;
                        }
                        {% elif field.FieldType == 1 %}
                        this.{{field.Name}} = ({{field.CsType}}{% if field.Nullable && field.CsType != "string" %}?{%endif%})field.Accessor.GetValue(message);
                        {% elif field.FieldType == 2 %}
                        this.{{field.Name}}.MergeFromMessage(message, field, full, change);
                        {% elif field.FieldType == 3 %}
                        this.{{field.Name}}.Clear();
                        this.{{field.Name}}.MergeFromMessage(message, field, true, null);
                        {%endif%}
                    }
                    {%endfor%}
                    continue;
                }
            }
        }
        #endregion
    }
    {% endfor %}
}